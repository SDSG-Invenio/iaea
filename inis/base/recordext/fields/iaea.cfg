##############################################################################
##########                                                          ##########
##########             INIS Bibfield Configuration File             ##########
##########                                                          ##########
##############################################################################

@extend
recid:
    producer:
        json_for_form(), {'recid': ''}

title:
    creator:
        @legacy((("245", "245__", "245__%"), ""),
                ("245__%", "main title", ""),
                ("245__a", "title", "title"),
                ("245__b", "subtitle"),
                ("245__n", "volume"),
                ("245__k", "form"))
        marc, "245__", { 'title':value['a'], 'subtitle':value['b'], 'volume': value['n'], 'form':value['k'] }
    producer:
        json_for_marc(), {"245__a": "title", "245__b": "subtitle", "245__k": "form"}

notes:
    creator:
        marc, "500__", value['a']
    producer:
        json_for_marc(), {"500__a": ""}
        json_for_form(), {"notes": ""}

member:
    creator:
        marc, "913__", value['a']
    producer:
        json_for_marc(), {"913__a": ""}
        json_for_form(), {"member": ""}

trns:
    schema:
        {'trns': {'type': 'list', 'force': True}}
    creator:
        marc, "911__", value['a']
    producer:
        json_for_marc(), {"911__a": ""}
        json_for_form(), {"trns": ""}
        json_for_ttf(), {"001^": ""}

collections:
    schema:
        {'collections': {'type': 'list', 'force': True}}
    creator:
        @legacy((("980", "980__", "980__%"), ""),
                ("980__%", "collection identifier", ""),
                ("980__a", "primary"),
                ("980__b", "secondary"),
                ("980__c", "deleted"))
        marc, "980__", { 'primary':value['a'], 'secondary':value['b'], 'deleted':value['c'] }
    producer:
        json_for_marc(), {"980__a":"primary", "980__b":"secondary", "980__c":"deleted"}

# publication_date:
#     creator:
#         @only_if_master_value(not value['a'] and not value['b'])
#         marc, "260__", datetime.date(*(time.strptime(value['c'] or '', '%Y-%m-%d')[0:3]))
#     producer:
#         json_for_marc(), {"260__c": "value.isoformat()"}
#         json_for_form(), {"publication_date": ""}
#    json:
#         loads, lambda d: __import__('datetime').datetime.strptime(d, "%Y-%m-%d").date()
#         dumps, lambda d: d.isoformat()

keywords:
    schema:
        {'keywords': {'type': 'list', 'force': True}}
    creator:
        marc, "6531_", value['a']
    producer:
        json_for_marc(), {"6531_a": "",}
        json_for_form(), {"keywords": "[value]"}
        json_for_ld(), {"keywords": "[value]"}

language:
    creator:
        @legacy((("041", "041__", "041__%"), ""),
                ("041__a", ""))
        marc, "041__", value['a']
    producer:
        json_for_marc(), {"041__a": ""}

_first_author, first_author, creator:
    creator:
        @only_if_master_value(value['4'] is None or value['4'] == '')
        marc, "100__", { 'name':value['a'], 'affiliation':value['u'], 'orcid': value['0'][7:] if (value['0'] or '').startswith('(orcid)') else '', 'familyname': value['a'].split(',')[0].strip(), 'givennames': ' '.join(value['a'].split(',')[1:]).strip()}
    producer:
        json_for_marc(), {"100__a": "name", "100__u": "affiliation", "100__0": "'(orcid)'+value['orcid'] if value.get('orcid') else None"}

_additional_authors, additional_authors, contributor:
    schema:
        {'_additional_authors': {'type': 'list', 'force': True}}
    creator:
        @parse_first('_first_author')
        @only_if_master_value(value['4'] is None or value['4'] == '')
        marc, "700__", {'name': value['a'], 'affiliation':value['u'], 'orcid': value['0'][7:] if (value['0'] or '').startswith('(orcid)') else '', 'familyname': value['a'].split(',')[0].strip(), 'givennames': ' '.join(value['a'].split(',')[1:]).strip()}
    producer:
        json_for_marc(), {"700__a": "name", "700__u": "affiliation", "700__0": "'(orcid)'+value['orcid'] if value.get('orcid') else None"}

authors:
    """List with all the authors, connected with main_author and rest_authors"""
    derived:
        @parse_first('_first_author', '_additional_authors')
        @connect('_first_author', sync_authors)
        @connect('_additional_authors', sync_authors)
        @only_if('_first_author' in self or '_additional_authors' in self)
        util_merge_fields_info_list(self, ['_first_author', '_additional_authors'])
    producer:
        json_for_form(), {"creators": "[{'name': value.get('name',''), 'affiliation': value.get('affiliation',''), 'orcid': value.get('orcid', '')}]"}

abstract:
    creator:
        marc, "520__", value['a']
    producer:
        json_for_marc(), {"520__a": "",}
        json_for_form(), {"description": ""}

action:
    creator:
        marc, "914__", value['a']
    producer:
        json_for_marc(), {"914__a": ""}